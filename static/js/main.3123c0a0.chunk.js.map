{"version":3,"sources":["Components/quoteBox.js","App.js","serviceWorker.js","index.js"],"names":["colors","quoteText","quoteAuthor","t_icon","f_icon","btn","quoteLogo","textOpacity","val","style","opacity","randomColor","color","document","querySelector","Math","floor","random","length","backgroundColor","icon","getElementsByClassName","i","changeIconColor","QuoteBox","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getQuote","timer","axios","get","concat","Date","getTime","then","ms","x","Promise","resolve","setTimeout","res","_res$data$","data","content","title","console","log","setState","quotes","rendered","author","isLoading","state","handleRequest","bind","assertThisInitialized","react_default","a","createElement","id","className","parser","rel","target","href","onClick","React","Component","App","quoteBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3123c0a0.chunk.js","sourcesContent":["import React from 'react'\r\nimport axios from 'axios'\r\nimport parser from 'html-react-parser'\r\nimport '../Css/box.css'\r\n\r\nlet colors, quoteText, quoteAuthor, t_icon, f_icon, btn, quoteLogo;\r\n\r\ncolors = ['#293C56', '#71a0a5', '#6F5E76', '#88A096', '#71a0a5', '#444444', '#567568', '#C9B1BD', '#305f72', '#30BCED', '#73FBD3', '#6b8c42'];\r\n\r\n// color = colors[Math.floor(Math.random() * colors.length)];\r\nfunction fade(ms){ \r\n  return function(x){\r\n    return new Promise(resolve => setTimeout(() => resolve(x), ms))\r\n  }\r\n}\r\n\r\nfunction textOpacity(val){\r\n  return (\r\n    quoteText.style.opacity = val,\r\n    quoteAuthor.style.opacity = val,\r\n    t_icon.style.opacity = val,\r\n    f_icon.style.opacity = val\r\n  )\r\n}\r\n\r\nfunction changeIconColor(icon,color){\r\n  icon = document.getElementsByClassName(icon);\r\n  for(let i = 0; i < icon.length; i++){\r\n   icon[i].style.color = color\r\n  }\r\n}\r\n\r\nfunction randomColor(color){\r\n  quoteText = document.querySelector('.text');\r\n  quoteAuthor = document.querySelector('.author');\r\n  t_icon = document.querySelector('.t-icon');\r\n  f_icon = document.querySelector('.f-icon');\r\n  quoteLogo = document.querySelector('.quote-symbol');\r\n  btn = document.querySelector('.btn');\r\n\r\n  color = color[Math.floor(Math.random() * colors.length)]\r\n  return (\r\n    // quoteText.style.color = color,\r\n    // quoteAuthor.style.color = color,\r\n    btn.style.backgroundColor = color,\r\n    quoteLogo.style.backgroundColor = color,\r\n    changeIconColor('fab',color)\r\n  )\r\n};\r\n\r\nclass QuoteBox extends React.Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n    quotes: '',\r\n    author:'',\r\n    isLoading: false\r\n    }\r\n    this.handleRequest = this.handleRequest.bind(this)\r\n  }\r\n\r\n  getQuote = (timer) => {\r\n    \r\n    return axios.get(`https://quotesondesign.com/wp-json/wp/v2/posts/?orderby=rand&per_page=1&timestap=${new Date().getTime()}`)\r\n\r\n    .then(fade(timer))\r\n    .then(\r\n      res => {\r\n      const {content, title} = res.data[0];\r\n      randomColor(colors);\r\n      textOpacity(1);\r\n\r\n      console.log(res.data[0])\r\n      this.setState({ \r\n        quotes: content.rendered,\r\n        author: title.rendered,\r\n        isLoading: false\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getQuote();\r\n  }\r\n\r\n  handleRequest(){\r\n    textOpacity(0);\r\n    this.getQuote(500)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div id=\"quote-box\" className=\"box-wrapper\" >\r\n        <div className='box'>\r\n          \r\n          <div className=\"quote-symbol\"></div>\r\n          <div className=\"quote-content\">\r\n            {/* <h1>Quote</h1> */}\r\n            <div id=\"text\" className=\"text\">\r\n              {/* the <p></p> tag is coming with the data collected from axios */}\r\n              {parser(this.state.quotes)}\r\n              <p id=\"author\" className=\"author\">&#x2014;{parser(this.state.author)} </p>\r\n              <div className=\"mediaIcons\">\r\n                  <a  id=\"tweet-quote\" rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://twitter.com/intent/tweet\"><i className=\"fab fa-twitter-square t-icon\"></i></a>\r\n                  <a href=\"http://facebook.com\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fab fa-facebook-square f-icon\"></i></a>\r\n                </div>\r\n              </div>\r\n\r\n              <footer>\r\n                <button id=\"new-quote\" className=\"btn btnQuote\" onClick={this.handleRequest}>New Quote</button>\r\n                \r\n              </footer>\r\n            </div>\r\n          </div>\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QuoteBox;","import React, { Component } from 'react';\r\nimport QuoteBox from './Components/quoteBox'\r\nimport './Css/App.css'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <QuoteBox/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}